{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "S3Prefix": {
      "Description": "S3 prefix to append before S3 key names.",
      "Type": "String",
      "Default": "vpnconfigs/",
      "AllowedPattern": "^[a-zA-Z0-9_\\-/.]*/$"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to instances",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "EnvName": {
      "Type": "String",
      "Default": "TestTransitVPC"
    },
    "BgpAsn" : {
      "Description" : "BGP ASN to use for Transit VPC.",
      "Type" : "String",
      "Default" : "64525"
    },
    "SpokeTag" : {
      "Description" : "Tag to use to identify spoke VPCs to connect to Transit VPC.",
      "Type" : "String",
      "Default" : "transitvpc:spoke"
    },
    "SpokeTagValue" : {
      "Description" : "Tag value to use to identify spoke VPCs to connect to Transit VPC.",
      "Type" : "String",
      "Default" : "true"
    },
    "S3BucketConf": {
      "Type" : "String",
      "Default" : "netgate-transit-vpnconfigs"
    },
    "S3BucketScript": {
      "Type": "String",
      "Default" : "netgate-lambda-functions"
    },
    "InstanceAMI": {
      "Type" : "String",
      "Default" : "ami-0440315fdc56d5a66"
    },
    "ALLOWSSH": {
      "Type": "String",
      "Default": "127.0.0.1/32"

    }
  },
  "Mappings" : {
    "Function" : {
      "Poller" : {
        "S3Bucket" : "netgate-lambda-functions",
        "S3Key" : "transit-vpc-poller.zip",
        "Name" : "vgw-poller",
        "Handler": "transit-vpc-poller.lambda_handler",
        "Description": "Transit VPC: Poller function responsible for identifying specifically tagged VGWs and creating VPN connections to transit VPC.",
        "Runtime": "python3.9",
        "Timeout": "60",
        "MemorySize": "128"
      }
    }
  },
  "Resources": {
    "TransitVpcPollerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          } ]
        },
        "Path": "/"
      }
    },
    "TransitVpcPollerRolePolicy" : {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles" : [ { "Ref" : "TransitVpcPollerRole" } ],
        "PolicyName": "Transit_VPC_Poller_Function_Permissions",
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": { "Fn::Join" : ["", ["arn:aws:logs:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":log-group:/aws/lambda/*" ]]}
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:*",
                "events:*",
                "ec2:DescribeVpcs",
                "ec2:DescribeRegions",
                "ec2:DescribeVpnGateways",
                "ec2:DescribeVpnConnections",
                "ec2:CreateTags",
                "ec2:CreateCustomerGateway",
                "ec2:DeleteCustomerGateway",
                "ec2:CreateVpnConnection",
                "ec2:DeleteVpnConnection"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:PutObjectAcl",
                "s3:GetObject"
              ],
              "Resource": { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref" : "VPNConfigS3Bucket" }, "/", {"Ref": "S3Prefix"}, "*" 	]] }
            }
          ]
        }
      }
    },

    "VPNConfigS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": { "Ref": "S3BucketConf" }
      }
    },
    "VPNConfigBucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "Bucket" : {"Ref" : "VPNConfigS3Bucket" },
        "PolicyDocument": {
          "Statement":[{
            "Sid": "Put Config Files",
            "Effect": "Allow",
            "Principal": {"AWS" : [{ "Fn::GetAtt" : ["TransitVpcPollerRole", "Arn"] }]},
            "Action": ["s3:GetObject", "s3:PutObject", "s3:PutObjectAcl"],
            "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "VPNConfigS3Bucket" },"/",{ "Ref" : "S3Prefix" }, "*" ]]}
          }]
        }
      }
    },
    "PollerFunction": {
      "DependsOn": [
        "TransitVpcPollerRolePolicy",
        "VPNConfigS3Bucket"
      ],
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName" : { "Fn::Join": ["-", [ { "Ref" : "AWS::StackName" }, { "Fn::FindInMap" : [ "Function", "Poller", "Name"]}	]] },
        "Code": {
          "S3Bucket": {"Ref": "S3BucketScript"},
          "S3Key": { "Fn::FindInMap" : [ "Function", "Poller", "S3Key"]}
        },
        "MemorySize": { "Fn::FindInMap" : [ "Function", "Poller", "MemorySize"]},
        "Handler": { "Fn::FindInMap" : [ "Function", "Poller", "Handler"]},
        "Role": {"Fn::GetAtt": ["TransitVpcPollerRole", "Arn"]},
        "Timeout": { "Fn::FindInMap" : [ "Function", "Poller", "Timeout"]},
        "Runtime": { "Fn::FindInMap" : [ "Function", "Poller", "Runtime"]},
        "Description": { "Fn::FindInMap" : [ "Function", "Poller", "Description"]},
        "Environment": {
          "Variables": {
            "BUCKET_NAME": { "Ref" : "VPNConfigS3Bucket" },
            "BUCKET_PREFIX": { "Ref" : "S3Prefix" },
            "EIP": { "Ref": "CreateEIP2" },
            "PIP": { "Fn::GetAtt" : ["CreateEth1", "PrimaryPrivateIpAddress" ]},
            "HUB_TAG": { "Ref": "SpokeTag" },
            "HUB_TAG_VALUE": { "Ref": "SpokeTagValue" },
            "BGP_ASN": {"Ref": "BgpAsn" }
          }
        }
      }
    },
    "PollerEvent": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Transit VPC: Rule to trigger VGW-Poller every minute to find VGWs that need to be attached to the transit VPC.",
        "ScheduleExpression": "cron(* * * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Id": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "VGW-Poller-1min"
                ]
              ]
            },
            "Arn": {
              "Fn::GetAtt": [
                "PollerFunction",
                "Arn"
              ]
            }
          }
        ]
      }
    },
    "PermissionForPollerEvent": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "PollerFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "PollerEvent",
            "Arn"
          ]
        }
      }
    },
    "ListS3BucketsInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [
          {
            "Ref" : "ListS3BucketsRole"
          }
        ]
      }
    },
    "ListS3BucketsPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "ListS3BucketsPolicy",
        "PolicyDocument" : {
          "Statement" : [
            {
              "Effect" : "Allow",
              "Action" : [
                "s3:List*",
                "s3:GetObject",
                "s3:DeleteObject"
              ],
              "Resource" : "*"
            }
          ]
        },
        "Roles" : [
          {
            "Ref" : "ListS3BucketsRole"
          }
        ]
      }
    },
    "ListS3BucketsRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement" : [
            {
              "Effect" : "Allow",
              "Principal" : {
                "Service" : ["ec2.amazonaws.com"]
              },
              "Action" : [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path" : "/"
      }
    },


    "CreateTransitVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.10.0.0/16",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Transit VPC2"
          }
        ]
      }
    },
    "CreateTransitInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "c5.18xlarge",
        "ImageId": { "Ref": "InstanceAMI" },
        "KeyName": {
          "Ref": "KeyName"
        },
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0",
            "NetworkInterfaceId": {
              "Ref": "CreateEth0"
            }
          },
          {
            "DeviceIndex": "1",
            "NetworkInterfaceId": {
              "Ref": "CreateEth1"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "TransitRouter"
          }
        ],
        "IamInstanceProfile": { "Ref" : "ListS3BucketsInstanceProfile" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
				"hostnamectl set-hostname --static transit01-euw1b\n",
				"sudo ln -sf /usr/bin/python3 /usr/bin/python\n",
				"sudo apt-get -y install python3-pip\n",
				"sudo pip install boto3\n",
				"echo 'configure\n",
				"\n",
				"pki private-key restconf-CA generate\n",
				"pki signing-request settings clear\n",
				"pki signing-request set common-name restconf-CA\n",
				"pki signing-request set digest sha512\n",
				"pki signing-request restconf-CA generate\n",
				"pki signing-request restconf-CA sign self purpose ca\n",
				"\n",
				"pki private-key restconf-client generate key-length 4096\n",
				"pki signing-request settings clear\n",
				"pki signing-request set common-name tnsr\n",
				"pki signing-request set digest sha512\n",
				"pki signing-request restconf-client generate\n",
				"pki signing-request restconf-client sign ca-name restconf-CA days-valid 365 digest sha512 purpose client\n",
				"\n",
				"pki private-key restconf generate key-length 4096\n",
				"pki signing-request settings clear\n",
				"pki signing-request set common-name transit01-euw1b\n",
				"pki signing-request set subject-alt-names add hostname transit01-euw1b\n",
				"pki signing-request set subject-alt-names add hostname localhost\n",
				"pki signing-request set subject-alt-names add ipv4-address 127.0.0.1\n",
				"pki signing-request set digest sha512\n",
				"pki signing-request restconf generate\n",
				"pki signing-request restconf sign ca-name restconf-CA days-valid 365 digest sha512 purpose server\n",
				"\n",
				"restconf\n",
				"global authentication-type client-certificate\n",
				"global server-ca-cert-path restconf-CA\n",
				"global server-certificate restconf\n",
				"global server-key restconf\n",
				"server host 127.0.0.1 443 true\n",
				"enable true\n",				
				"exit\n",
				"configuration copy running startup\n' > restconf_config\n",				
				"sudo clixon_cli -F restconf_config\n",
				"sudo tnsrctl restart"
              ]
            ]
          }
        }
      }
    },
    "CreateEth0": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "PrivateIpAddress": "10.10.0.100",
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "CreateSubnet"
        },
        "GroupSet": [
          {
            "Ref": "CreateSG"
          }
        ],
        "Tags": [
          {
            "Key": "env",
            "Value": {
              "Ref": "EnvName"
            }
          },
          {
            "Key": "Name",
            "Value": "TransitVPC-eth0"
          }
        ]
      }
    },
    "CreateEth1": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "PrivateIpAddress": "10.10.0.101",
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "CreateSubnet"
        },
        "GroupSet": [
          {
            "Ref": "CreateSG"
          }
        ],
        "Tags": [
          {
            "Key": "env",
            "Value": {
              "Ref": "EnvName"
            }
          },
          {
            "Key": "Name",
            "Value": "TransitVPC-eth1"
          }
        ]
      }
    },
    "CreateSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.10.0.0/24",
        "VpcId": {
          "Ref": "CreateTransitVPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "env",
            "Value": {
              "Ref": "EnvName"
            }
          },
          {
            "Key": "Name",
            "Value": "Subnet Transit VPC"
          }
        ]
      }
    },
    "CreateSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "SG-BasicTransitVPC",
        "GroupDescription": "Basic networking rules",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref" : "ALLOWSSH"
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "50",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "4500",
            "ToPort": "4500",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "500",
            "ToPort": "500",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref" : "ALLOWSSH"
            }
          }
        ],
        "VpcId": {
          "Ref": "CreateTransitVPC"
        }
      }
    },
    "CreateEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "CreateEIP2": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "CreateAssociateIP": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "CreateEIP",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "CreateEth0"
        }
      }
    },
    "CreateAssociateIP2": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "CreateEIP2",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "CreateEth1"
        }
      }
    },
    "CreateGateWay": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "IGW-TransitVPC"
          }
        ]
      }
    },
    "CreateGateWayAtt": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "CreateGateWay"
        },
        "VpcId": {
          "Ref": "CreateTransitVPC"
        }
      }
    },
    "CreateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "env",
            "Value": {
              "Ref": "EnvName"
            }
          },
          {
            "Key": "Name",
            "Value": "TransitVPC RT"
          }
        ],
        "VpcId": {
          "Ref": "CreateTransitVPC"
        }
      }
    },
    "CreateRoutes": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "CreateRouteTable"
        },
        "GatewayId": {
          "Ref": "CreateGateWay"
        }
      }
    },
    "CreateSubAssoc": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "CreateRouteTable"
        },
        "SubnetId": {
          "Ref": "CreateSubnet"
        }
      }
    }
  }
}
